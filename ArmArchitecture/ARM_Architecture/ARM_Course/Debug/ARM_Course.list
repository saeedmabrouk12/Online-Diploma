
ARM_Course.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e80  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000fb0  08000fb0  00010fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000fbc  08000fbc  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000fbc  08000fbc  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fbc  08000fbc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fbc  08000fbc  00010fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fc0  08000fc0  00010fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000fc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000004  08000fc8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08000fc8  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002395  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a8f  00000000  00000000  000223c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002b0  00000000  00000000  00022e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000248  00000000  00000000  00023108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003a64  00000000  00000000  00023350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000355b  00000000  00000000  00026db4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000d654  00000000  00000000  0002a30f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00037963  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000974  00000000  00000000  000379b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08000f98 	.word	0x08000f98

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08000f98 	.word	0x08000f98

08000170 <SWITCH_CPU_AcessLevel>:
 enum CPUAccessLevel{
	 privileged,
	 unprivileged
 };

 void SWITCH_CPU_AcessLevel(enum CPUAccessLevel level){
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
	 switch(level){
 800017a:	79fb      	ldrb	r3, [r7, #7]
 800017c:	2b00      	cmp	r3, #0
 800017e:	d002      	beq.n	8000186 <SWITCH_CPU_AcessLevel+0x16>
 8000180:	2b01      	cmp	r3, #1
 8000182:	d009      	beq.n	8000198 <SWITCH_CPU_AcessLevel+0x28>
		 __asm("mrs r3,CONTROL \n\t"
				 "orr r3,r3,#0x1 \n\t"
				 "msr CONTROL,r3");
				 break;
	 }
 }
 8000184:	e00f      	b.n	80001a6 <SWITCH_CPU_AcessLevel+0x36>
		 __asm("mrs r3,CONTROL \n\t"
 8000186:	f3ef 8314 	mrs	r3, CONTROL
 800018a:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800018e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000192:	f383 8814 	msr	CONTROL, r3
		 break;
 8000196:	e006      	b.n	80001a6 <SWITCH_CPU_AcessLevel+0x36>
		 __asm("mrs r3,CONTROL \n\t"
 8000198:	f3ef 8314 	mrs	r3, CONTROL
 800019c:	f043 0301 	orr.w	r3, r3, #1
 80001a0:	f383 8814 	msr	CONTROL, r3
				 break;
 80001a4:	bf00      	nop
 }
 80001a6:	bf00      	nop
 80001a8:	370c      	adds	r7, #12
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bc80      	pop	{r7}
 80001ae:	4770      	bx	lr

080001b0 <SVC_Handler>:
 void SVC_Handler(){
 80001b0:	b580      	push	{r7, lr}
 80001b2:	af00      	add	r7, sp, #0
 	SWITCH_CPU_AcessLevel(privileged);
 80001b4:	2000      	movs	r0, #0
 80001b6:	f7ff ffdb 	bl	8000170 <SWITCH_CPU_AcessLevel>
 }
 80001ba:	bf00      	nop
 80001bc:	bd80      	pop	{r7, pc}
	...

080001c0 <EXTI9_CALLBACK>:
void EXTI9_CALLBACK(void)
{
 80001c0:	b480      	push	{r7}
 80001c2:	af00      	add	r7, sp, #0
	if(IRQ_Flag==0){
 80001c4:	4b0d      	ldr	r3, [pc, #52]	; (80001fc <EXTI9_CALLBACK+0x3c>)
 80001c6:	781b      	ldrb	r3, [r3, #0]
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d109      	bne.n	80001e0 <EXTI9_CALLBACK+0x20>
		TASKA_flag=1;
 80001cc:	4b0c      	ldr	r3, [pc, #48]	; (8000200 <EXTI9_CALLBACK+0x40>)
 80001ce:	2201      	movs	r2, #1
 80001d0:	701a      	strb	r2, [r3, #0]
		TASKB_flag=0;
 80001d2:	4b0c      	ldr	r3, [pc, #48]	; (8000204 <EXTI9_CALLBACK+0x44>)
 80001d4:	2200      	movs	r2, #0
 80001d6:	701a      	strb	r2, [r3, #0]
		IRQ_Flag=1;
 80001d8:	4b08      	ldr	r3, [pc, #32]	; (80001fc <EXTI9_CALLBACK+0x3c>)
 80001da:	2201      	movs	r2, #1
 80001dc:	701a      	strb	r2, [r3, #0]
	}else{
		TASKB_flag=1;
		TASKA_flag=0;
		IRQ_Flag=0;
	}
}
 80001de:	e008      	b.n	80001f2 <EXTI9_CALLBACK+0x32>
		TASKB_flag=1;
 80001e0:	4b08      	ldr	r3, [pc, #32]	; (8000204 <EXTI9_CALLBACK+0x44>)
 80001e2:	2201      	movs	r2, #1
 80001e4:	701a      	strb	r2, [r3, #0]
		TASKA_flag=0;
 80001e6:	4b06      	ldr	r3, [pc, #24]	; (8000200 <EXTI9_CALLBACK+0x40>)
 80001e8:	2200      	movs	r2, #0
 80001ea:	701a      	strb	r2, [r3, #0]
		IRQ_Flag=0;
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI9_CALLBACK+0x3c>)
 80001ee:	2200      	movs	r2, #0
 80001f0:	701a      	strb	r2, [r3, #0]
}
 80001f2:	bf00      	nop
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	20000036 	.word	0x20000036
 8000200:	20000034 	.word	0x20000034
 8000204:	20000035 	.word	0x20000035

08000208 <TASKA>:
int TASKA(int a ,int b ,int c){
 8000208:	b480      	push	{r7}
 800020a:	b085      	sub	sp, #20
 800020c:	af00      	add	r7, sp, #0
 800020e:	60f8      	str	r0, [r7, #12]
 8000210:	60b9      	str	r1, [r7, #8]
 8000212:	607a      	str	r2, [r7, #4]
	return a+b+c;
 8000214:	68fa      	ldr	r2, [r7, #12]
 8000216:	68bb      	ldr	r3, [r7, #8]
 8000218:	441a      	add	r2, r3
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	4413      	add	r3, r2
}
 800021e:	4618      	mov	r0, r3
 8000220:	3714      	adds	r7, #20
 8000222:	46bd      	mov	sp, r7
 8000224:	bc80      	pop	{r7}
 8000226:	4770      	bx	lr

08000228 <TASKB>:
int TASKB(int a ,int b ,int c,int d){
 8000228:	b480      	push	{r7}
 800022a:	b085      	sub	sp, #20
 800022c:	af00      	add	r7, sp, #0
 800022e:	60f8      	str	r0, [r7, #12]
 8000230:	60b9      	str	r1, [r7, #8]
 8000232:	607a      	str	r2, [r7, #4]
 8000234:	603b      	str	r3, [r7, #0]
	return a+b+c+d;
 8000236:	68fa      	ldr	r2, [r7, #12]
 8000238:	68bb      	ldr	r3, [r7, #8]
 800023a:	441a      	add	r2, r3
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	441a      	add	r2, r3
 8000240:	683b      	ldr	r3, [r7, #0]
 8000242:	4413      	add	r3, r2
}
 8000244:	4618      	mov	r0, r3
 8000246:	3714      	adds	r7, #20
 8000248:	46bd      	mov	sp, r7
 800024a:	bc80      	pop	{r7}
 800024c:	4770      	bx	lr
	...

08000250 <mainOS>:
void mainOS(){
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
	_E_MSP=_S_MSP-512;
 8000256:	4b32      	ldr	r3, [pc, #200]	; (8000320 <mainOS+0xd0>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800025e:	4a31      	ldr	r2, [pc, #196]	; (8000324 <mainOS+0xd4>)
 8000260:	6013      	str	r3, [r2, #0]
	_S_PSP_TA = _E_MSP - 8;
 8000262:	4b30      	ldr	r3, [pc, #192]	; (8000324 <mainOS+0xd4>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	3b08      	subs	r3, #8
 8000268:	4a2f      	ldr	r2, [pc, #188]	; (8000328 <mainOS+0xd8>)
 800026a:	6013      	str	r3, [r2, #0]
	_E_PSP_TA = _S_PSP_TA - TaskA_Stack_Size;
 800026c:	4b2e      	ldr	r3, [pc, #184]	; (8000328 <mainOS+0xd8>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	3b64      	subs	r3, #100	; 0x64
 8000272:	4a2e      	ldr	r2, [pc, #184]	; (800032c <mainOS+0xdc>)
 8000274:	6013      	str	r3, [r2, #0]

	_S_PSP_TB = _E_PSP_TA - 8;
 8000276:	4b2d      	ldr	r3, [pc, #180]	; (800032c <mainOS+0xdc>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	3b08      	subs	r3, #8
 800027c:	4a2c      	ldr	r2, [pc, #176]	; (8000330 <mainOS+0xe0>)
 800027e:	6013      	str	r3, [r2, #0]
	_E_PSP_TB = _S_PSP_TB - TaskB_Stack_Size;
 8000280:	4b2b      	ldr	r3, [pc, #172]	; (8000330 <mainOS+0xe0>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	3b64      	subs	r3, #100	; 0x64
 8000286:	4a2b      	ldr	r2, [pc, #172]	; (8000334 <mainOS+0xe4>)
 8000288:	6013      	str	r3, [r2, #0]

	while(1){
		__asm("NOP");
 800028a:	bf00      	nop
		if(TASKA_flag){
 800028c:	4b2a      	ldr	r3, [pc, #168]	; (8000338 <mainOS+0xe8>)
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d01f      	beq.n	80002d4 <mainOS+0x84>
			//set psp register to psp task a
			OS_SET_PSP(_S_PSP_TA);
 8000294:	4b24      	ldr	r3, [pc, #144]	; (8000328 <mainOS+0xd8>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4618      	mov	r0, r3
 800029a:	f380 8809 	msr	PSP, r0
			//set sp to ->psp
			OS_SWITCH_SP_To_PSP;
 800029e:	f3ef 8014 	mrs	r0, CONTROL
 80002a2:	f04f 0102 	mov.w	r1, #2
 80002a6:	ea40 0001 	orr.w	r0, r0, r1
 80002aa:	f380 8814 	msr	CONTROL, r0
			//switch to unprivilded mode
			SWITCH_CPU_AcessLevel(unprivileged);
 80002ae:	2001      	movs	r0, #1
 80002b0:	f7ff ff5e 	bl	8000170 <SWITCH_CPU_AcessLevel>
			int x = TASKA(1,2,3);
 80002b4:	2203      	movs	r2, #3
 80002b6:	2102      	movs	r1, #2
 80002b8:	2001      	movs	r0, #1
 80002ba:	f7ff ffa5 	bl	8000208 <TASKA>
 80002be:	6038      	str	r0, [r7, #0]
			//switch to privileged
			OS_Generate_Exception;
 80002c0:	df03      	svc	3
			//set sp to ->msp
			OS_SWITCH_SP_To_MSP;
 80002c2:	f3ef 8014 	mrs	r0, CONTROL
 80002c6:	f04f 0105 	mov.w	r1, #5
 80002ca:	ea00 0001 	and.w	r0, r0, r1
 80002ce:	f380 8814 	msr	CONTROL, r0
 80002d2:	e7da      	b.n	800028a <mainOS+0x3a>
		}else if(TASKB_flag){
 80002d4:	4b19      	ldr	r3, [pc, #100]	; (800033c <mainOS+0xec>)
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d0d6      	beq.n	800028a <mainOS+0x3a>
			//set psp register to psp task B
			OS_SET_PSP(_S_PSP_TB);
 80002dc:	4b14      	ldr	r3, [pc, #80]	; (8000330 <mainOS+0xe0>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4618      	mov	r0, r3
 80002e2:	f380 8809 	msr	PSP, r0
			//set sp to ->psp
			OS_SWITCH_SP_To_PSP;
 80002e6:	f3ef 8014 	mrs	r0, CONTROL
 80002ea:	f04f 0102 	mov.w	r1, #2
 80002ee:	ea40 0001 	orr.w	r0, r0, r1
 80002f2:	f380 8814 	msr	CONTROL, r0
			//switch to unprivilded mode
			SWITCH_CPU_AcessLevel(unprivileged);
 80002f6:	2001      	movs	r0, #1
 80002f8:	f7ff ff3a 	bl	8000170 <SWITCH_CPU_AcessLevel>
			int x = TASKB(2,3,4,5);
 80002fc:	2305      	movs	r3, #5
 80002fe:	2204      	movs	r2, #4
 8000300:	2103      	movs	r1, #3
 8000302:	2002      	movs	r0, #2
 8000304:	f7ff ff90 	bl	8000228 <TASKB>
 8000308:	6078      	str	r0, [r7, #4]
			//switch to privileged
			OS_Generate_Exception;
 800030a:	df03      	svc	3
			//set sp to ->msp
			OS_SWITCH_SP_To_MSP;
 800030c:	f3ef 8014 	mrs	r0, CONTROL
 8000310:	f04f 0105 	mov.w	r1, #5
 8000314:	ea00 0001 	and.w	r0, r0, r1
 8000318:	f380 8814 	msr	CONTROL, r0
		__asm("NOP");
 800031c:	e7b5      	b.n	800028a <mainOS+0x3a>
 800031e:	bf00      	nop
 8000320:	20000000 	.word	0x20000000
 8000324:	20000020 	.word	0x20000020
 8000328:	20000024 	.word	0x20000024
 800032c:	20000028 	.word	0x20000028
 8000330:	2000002c 	.word	0x2000002c
 8000334:	20000030 	.word	0x20000030
 8000338:	20000034 	.word	0x20000034
 800033c:	20000035 	.word	0x20000035

08000340 <main>:
		}
	}
}

int main(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b088      	sub	sp, #32
 8000344:	af00      	add	r7, sp, #0
	RCC_GPIOB_CLK_EN();
 8000346:	4b15      	ldr	r3, [pc, #84]	; (800039c <main+0x5c>)
 8000348:	699b      	ldr	r3, [r3, #24]
 800034a:	4a14      	ldr	r2, [pc, #80]	; (800039c <main+0x5c>)
 800034c:	f043 0308 	orr.w	r3, r3, #8
 8000350:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 8000352:	4b12      	ldr	r3, [pc, #72]	; (800039c <main+0x5c>)
 8000354:	699b      	ldr	r3, [r3, #24]
 8000356:	4a11      	ldr	r2, [pc, #68]	; (800039c <main+0x5c>)
 8000358:	f043 0301 	orr.w	r3, r3, #1
 800035c:	6193      	str	r3, [r2, #24]

	//Set EXTI Configuration
	EXTI_PinConfig_t EXTIConfig;
	EXTIConfig.EXTI_PIN = EXTI9PB9;
 800035e:	4a10      	ldr	r2, [pc, #64]	; (80003a0 <main+0x60>)
 8000360:	f107 030c 	add.w	r3, r7, #12
 8000364:	ca07      	ldmia	r2, {r0, r1, r2}
 8000366:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTIConfig.Trigger_Case = EXTI_Trigger_RISING;
 800036a:	2300      	movs	r3, #0
 800036c:	763b      	strb	r3, [r7, #24]
	EXTIConfig.P_IRQ_CallBack = EXTI9_CALLBACK;
 800036e:	4b0d      	ldr	r3, [pc, #52]	; (80003a4 <main+0x64>)
 8000370:	61fb      	str	r3, [r7, #28]
	EXTIConfig.IRQ_EN = EXTI_IRQ_Enable;
 8000372:	2301      	movs	r3, #1
 8000374:	767b      	strb	r3, [r7, #25]
	MCAL_EXTI_GPIO_Init(&EXTIConfig);
 8000376:	f107 030c 	add.w	r3, r7, #12
 800037a:	4618      	mov	r0, r3
 800037c:	f000 fb5a 	bl	8000a34 <MCAL_EXTI_GPIO_Init>


	mainOS();
 8000380:	f7ff ff66 	bl	8000250 <mainOS>
	IRQ_Flag = 1;
 8000384:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <main+0x68>)
 8000386:	2201      	movs	r2, #1
 8000388:	701a      	strb	r2, [r3, #0]

	while (1)
	{
		if(IRQ_Flag)
 800038a:	4b07      	ldr	r3, [pc, #28]	; (80003a8 <main+0x68>)
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d0fb      	beq.n	800038a <main+0x4a>
		{
			IRQ_Flag = 0;
 8000392:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <main+0x68>)
 8000394:	2200      	movs	r2, #0
 8000396:	701a      	strb	r2, [r3, #0]
		if(IRQ_Flag)
 8000398:	e7f7      	b.n	800038a <main+0x4a>
 800039a:	bf00      	nop
 800039c:	40021000 	.word	0x40021000
 80003a0:	08000fb0 	.word	0x08000fb0
 80003a4:	080001c1 	.word	0x080001c1
 80003a8:	20000036 	.word	0x20000036

080003ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003ac:	480d      	ldr	r0, [pc, #52]	; (80003e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003b4:	480c      	ldr	r0, [pc, #48]	; (80003e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80003b6:	490d      	ldr	r1, [pc, #52]	; (80003ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80003b8:	4a0d      	ldr	r2, [pc, #52]	; (80003f0 <LoopForever+0xe>)
  movs r3, #0
 80003ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003bc:	e002      	b.n	80003c4 <LoopCopyDataInit>

080003be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003c2:	3304      	adds	r3, #4

080003c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003c8:	d3f9      	bcc.n	80003be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ca:	4a0a      	ldr	r2, [pc, #40]	; (80003f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003cc:	4c0a      	ldr	r4, [pc, #40]	; (80003f8 <LoopForever+0x16>)
  movs r3, #0
 80003ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003d0:	e001      	b.n	80003d6 <LoopFillZerobss>

080003d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003d4:	3204      	adds	r2, #4

080003d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003d8:	d3fb      	bcc.n	80003d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003da:	f000 fdb9 	bl	8000f50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003de:	f7ff ffaf 	bl	8000340 <main>

080003e2 <LoopForever>:

LoopForever:
    b LoopForever
 80003e2:	e7fe      	b.n	80003e2 <LoopForever>
  ldr   r0, =_estack
 80003e4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80003e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003ec:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003f0:	08000fc4 	.word	0x08000fc4
  ldr r2, =_sbss
 80003f4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003f8:	200000c8 	.word	0x200000c8

080003fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003fc:	e7fe      	b.n	80003fc <ADC1_2_IRQHandler>
	...

08000400 <Get_CRLH_Position>:
 * =======================================================================================
 * 							Generic Functions
 * =======================================================================================
 */
uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	4603      	mov	r3, r0
 8000408:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 800040a:	88fb      	ldrh	r3, [r7, #6]
 800040c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000410:	f000 80a5 	beq.w	800055e <Get_CRLH_Position+0x15e>
 8000414:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000418:	f300 80a3 	bgt.w	8000562 <Get_CRLH_Position+0x162>
 800041c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000420:	f000 809b 	beq.w	800055a <Get_CRLH_Position+0x15a>
 8000424:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000428:	f300 809b 	bgt.w	8000562 <Get_CRLH_Position+0x162>
 800042c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000430:	f000 8091 	beq.w	8000556 <Get_CRLH_Position+0x156>
 8000434:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000438:	f300 8093 	bgt.w	8000562 <Get_CRLH_Position+0x162>
 800043c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000440:	f000 8087 	beq.w	8000552 <Get_CRLH_Position+0x152>
 8000444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000448:	f300 808b 	bgt.w	8000562 <Get_CRLH_Position+0x162>
 800044c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000450:	d07d      	beq.n	800054e <Get_CRLH_Position+0x14e>
 8000452:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000456:	f300 8084 	bgt.w	8000562 <Get_CRLH_Position+0x162>
 800045a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800045e:	d074      	beq.n	800054a <Get_CRLH_Position+0x14a>
 8000460:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000464:	dc7d      	bgt.n	8000562 <Get_CRLH_Position+0x162>
 8000466:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800046a:	d06c      	beq.n	8000546 <Get_CRLH_Position+0x146>
 800046c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000470:	dc77      	bgt.n	8000562 <Get_CRLH_Position+0x162>
 8000472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000476:	d064      	beq.n	8000542 <Get_CRLH_Position+0x142>
 8000478:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800047c:	dc71      	bgt.n	8000562 <Get_CRLH_Position+0x162>
 800047e:	2b80      	cmp	r3, #128	; 0x80
 8000480:	d05d      	beq.n	800053e <Get_CRLH_Position+0x13e>
 8000482:	2b80      	cmp	r3, #128	; 0x80
 8000484:	dc6d      	bgt.n	8000562 <Get_CRLH_Position+0x162>
 8000486:	2b20      	cmp	r3, #32
 8000488:	dc48      	bgt.n	800051c <Get_CRLH_Position+0x11c>
 800048a:	2b00      	cmp	r3, #0
 800048c:	dd69      	ble.n	8000562 <Get_CRLH_Position+0x162>
 800048e:	3b01      	subs	r3, #1
 8000490:	2b1f      	cmp	r3, #31
 8000492:	d866      	bhi.n	8000562 <Get_CRLH_Position+0x162>
 8000494:	a201      	add	r2, pc, #4	; (adr r2, 800049c <Get_CRLH_Position+0x9c>)
 8000496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800049a:	bf00      	nop
 800049c:	08000523 	.word	0x08000523
 80004a0:	08000527 	.word	0x08000527
 80004a4:	08000563 	.word	0x08000563
 80004a8:	0800052b 	.word	0x0800052b
 80004ac:	08000563 	.word	0x08000563
 80004b0:	08000563 	.word	0x08000563
 80004b4:	08000563 	.word	0x08000563
 80004b8:	0800052f 	.word	0x0800052f
 80004bc:	08000563 	.word	0x08000563
 80004c0:	08000563 	.word	0x08000563
 80004c4:	08000563 	.word	0x08000563
 80004c8:	08000563 	.word	0x08000563
 80004cc:	08000563 	.word	0x08000563
 80004d0:	08000563 	.word	0x08000563
 80004d4:	08000563 	.word	0x08000563
 80004d8:	08000533 	.word	0x08000533
 80004dc:	08000563 	.word	0x08000563
 80004e0:	08000563 	.word	0x08000563
 80004e4:	08000563 	.word	0x08000563
 80004e8:	08000563 	.word	0x08000563
 80004ec:	08000563 	.word	0x08000563
 80004f0:	08000563 	.word	0x08000563
 80004f4:	08000563 	.word	0x08000563
 80004f8:	08000563 	.word	0x08000563
 80004fc:	08000563 	.word	0x08000563
 8000500:	08000563 	.word	0x08000563
 8000504:	08000563 	.word	0x08000563
 8000508:	08000563 	.word	0x08000563
 800050c:	08000563 	.word	0x08000563
 8000510:	08000563 	.word	0x08000563
 8000514:	08000563 	.word	0x08000563
 8000518:	08000537 	.word	0x08000537
 800051c:	2b40      	cmp	r3, #64	; 0x40
 800051e:	d00c      	beq.n	800053a <Get_CRLH_Position+0x13a>
 8000520:	e01f      	b.n	8000562 <Get_CRLH_Position+0x162>
	{
	case GPIO_PIN_0:
		return 0 ;
 8000522:	2300      	movs	r3, #0
 8000524:	e01e      	b.n	8000564 <Get_CRLH_Position+0x164>
		break ;
	case GPIO_PIN_1:
		return 4 ;
 8000526:	2304      	movs	r3, #4
 8000528:	e01c      	b.n	8000564 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_2:
		return 8 ;
 800052a:	2308      	movs	r3, #8
 800052c:	e01a      	b.n	8000564 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_3:
		return 12 ;
 800052e:	230c      	movs	r3, #12
 8000530:	e018      	b.n	8000564 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_4:
		return 16 ;
 8000532:	2310      	movs	r3, #16
 8000534:	e016      	b.n	8000564 <Get_CRLH_Position+0x164>
		break ;


	case GPIO_PIN_5:
		return 20 ;
 8000536:	2314      	movs	r3, #20
 8000538:	e014      	b.n	8000564 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_6:
		return 24 ;
 800053a:	2318      	movs	r3, #24
 800053c:	e012      	b.n	8000564 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_7:
		return 28 ;
 800053e:	231c      	movs	r3, #28
 8000540:	e010      	b.n	8000564 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_8:
		return 0 ;
 8000542:	2300      	movs	r3, #0
 8000544:	e00e      	b.n	8000564 <Get_CRLH_Position+0x164>
		break ;
	case GPIO_PIN_9:
		return 4 ;
 8000546:	2304      	movs	r3, #4
 8000548:	e00c      	b.n	8000564 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_10:
		return 8 ;
 800054a:	2308      	movs	r3, #8
 800054c:	e00a      	b.n	8000564 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_11:
		return 12 ;
 800054e:	230c      	movs	r3, #12
 8000550:	e008      	b.n	8000564 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_12:
		return 16 ;
 8000552:	2310      	movs	r3, #16
 8000554:	e006      	b.n	8000564 <Get_CRLH_Position+0x164>
		break ;


	case GPIO_PIN_13:
		return 20 ;
 8000556:	2314      	movs	r3, #20
 8000558:	e004      	b.n	8000564 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_14:
		return 24 ;
 800055a:	2318      	movs	r3, #24
 800055c:	e002      	b.n	8000564 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_15:
		return 28 ;
 800055e:	231c      	movs	r3, #28
 8000560:	e000      	b.n	8000564 <Get_CRLH_Position+0x164>
		break ;


	}
return 0 ;
 8000562:	2300      	movs	r3, #0

}
 8000564:	4618      	mov	r0, r3
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	bc80      	pop	{r7}
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MCAL_GPIO_Init>:
 * @retval 			-none
 * Note				-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 					 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init  (GPIO_TypeDef *GPIOx , GPIO_PinConfig_t* PinConfig)
{
 8000570:	b590      	push	{r4, r7, lr}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
	volatile uint32_t* configregister = NULL ;
 800057a:	2300      	movs	r3, #0
 800057c:	60fb      	str	r3, [r7, #12]
	uint8_t	PIN_Config = 0 ;
 800057e:	2300      	movs	r3, #0
 8000580:	72fb      	strb	r3, [r7, #11]

	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	881b      	ldrh	r3, [r3, #0]
 8000586:	2bff      	cmp	r3, #255	; 0xff
 8000588:	d801      	bhi.n	800058e <MCAL_GPIO_Init+0x1e>
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	e001      	b.n	8000592 <MCAL_GPIO_Init+0x22>
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	3304      	adds	r3, #4
 8000592:	60fb      	str	r3, [r7, #12]

	//CNF0[1:0] MODE0[1:0=]   Clear the four Bits
	(*configregister) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	881b      	ldrh	r3, [r3, #0]
 8000598:	4618      	mov	r0, r3
 800059a:	f7ff ff31 	bl	8000400 <Get_CRLH_Position>
 800059e:	4603      	mov	r3, r0
 80005a0:	461a      	mov	r2, r3
 80005a2:	230f      	movs	r3, #15
 80005a4:	4093      	lsls	r3, r2
 80005a6:	43da      	mvns	r2, r3
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	401a      	ands	r2, r3
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	601a      	str	r2, [r3, #0]

	//if Pin is output
	if ( (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP ) ||  (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD ) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD ) ||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP ))
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	789b      	ldrb	r3, [r3, #2]
 80005b6:	2b04      	cmp	r3, #4
 80005b8:	d00b      	beq.n	80005d2 <MCAL_GPIO_Init+0x62>
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	789b      	ldrb	r3, [r3, #2]
 80005be:	2b05      	cmp	r3, #5
 80005c0:	d007      	beq.n	80005d2 <MCAL_GPIO_Init+0x62>
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	789b      	ldrb	r3, [r3, #2]
 80005c6:	2b07      	cmp	r3, #7
 80005c8:	d003      	beq.n	80005d2 <MCAL_GPIO_Init+0x62>
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	789b      	ldrb	r3, [r3, #2]
 80005ce:	2b06      	cmp	r3, #6
 80005d0:	d11c      	bne.n	800060c <MCAL_GPIO_Init+0x9c>
	{
		PIN_Config  =  (  ( ( (PinConfig->GPIO_MODE - 4) <<2 ) |  PinConfig->GPIO_Output_Speed   ) & 0x0F );
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	789b      	ldrb	r3, [r3, #2]
 80005d6:	3b04      	subs	r3, #4
 80005d8:	009b      	lsls	r3, r3, #2
 80005da:	b25a      	sxtb	r2, r3
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	78db      	ldrb	r3, [r3, #3]
 80005e0:	b25b      	sxtb	r3, r3
 80005e2:	4313      	orrs	r3, r2
 80005e4:	b25b      	sxtb	r3, r3
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	f003 030f 	and.w	r3, r3, #15
 80005ec:	72fb      	strb	r3, [r7, #11]
		(*configregister) |= (  (  PIN_Config  ) << ( Get_CRLH_Position( PinConfig->GPIO_PinNumber) ) ) ;
 80005ee:	7afc      	ldrb	r4, [r7, #11]
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	881b      	ldrh	r3, [r3, #0]
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff ff03 	bl	8000400 <Get_CRLH_Position>
 80005fa:	4603      	mov	r3, r0
 80005fc:	fa04 f203 	lsl.w	r2, r4, r3
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	431a      	orrs	r2, r3
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	e057      	b.n	80006bc <MCAL_GPIO_Init+0x14c>
	}
	//if pin is input
	else //MODE =  00: Input mode (reset state)
	{
		if (  (PinConfig->GPIO_MODE == GPIO_MODE_ANALOG ) || (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO ) )
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	789b      	ldrb	r3, [r3, #2]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d003      	beq.n	800061c <MCAL_GPIO_Init+0xac>
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	789b      	ldrb	r3, [r3, #2]
 8000618:	2b01      	cmp	r3, #1
 800061a:	d115      	bne.n	8000648 <MCAL_GPIO_Init+0xd8>
		{
			PIN_Config  =  (  ( ( PinConfig->GPIO_MODE <<2 ) |  0x0   ) & 0x0F );
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	789b      	ldrb	r3, [r3, #2]
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	b2db      	uxtb	r3, r3
 8000624:	f003 030f 	and.w	r3, r3, #15
 8000628:	72fb      	strb	r3, [r7, #11]
			(*configregister) |= (  (  PIN_Config  ) << ( Get_CRLH_Position( PinConfig->GPIO_PinNumber) ) ) ;
 800062a:	7afc      	ldrb	r4, [r7, #11]
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	881b      	ldrh	r3, [r3, #0]
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff fee5 	bl	8000400 <Get_CRLH_Position>
 8000636:	4603      	mov	r3, r0
 8000638:	fa04 f203 	lsl.w	r2, r4, r3
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	431a      	orrs	r2, r3
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	e039      	b.n	80006bc <MCAL_GPIO_Init+0x14c>
		}
		else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT )
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	789b      	ldrb	r3, [r3, #2]
 800064c:	2b08      	cmp	r3, #8
 800064e:	d110      	bne.n	8000672 <MCAL_GPIO_Init+0x102>
		{
			PIN_Config  =  (  ( ( GPIO_MODE_INPUT_FLO <<2 ) |  0x0   ) & 0x0F );
 8000650:	2304      	movs	r3, #4
 8000652:	72fb      	strb	r3, [r7, #11]
			(*configregister) |= (  (  PIN_Config  ) << ( Get_CRLH_Position( PinConfig->GPIO_PinNumber) ) ) ;
 8000654:	7afc      	ldrb	r4, [r7, #11]
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	881b      	ldrh	r3, [r3, #0]
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff fed0 	bl	8000400 <Get_CRLH_Position>
 8000660:	4603      	mov	r3, r0
 8000662:	fa04 f203 	lsl.w	r2, r4, r3
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	431a      	orrs	r2, r3
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	601a      	str	r2, [r3, #0]
			}

		}
	}

}
 8000670:	e024      	b.n	80006bc <MCAL_GPIO_Init+0x14c>
			PIN_Config  =  (  ( ( GPIO_MODE_INPUT_PU <<2 ) |  0x0   ) & 0x0F );
 8000672:	2308      	movs	r3, #8
 8000674:	72fb      	strb	r3, [r7, #11]
			(*configregister) |= (  (  PIN_Config  ) << ( Get_CRLH_Position( PinConfig->GPIO_PinNumber) ) ) ;
 8000676:	7afc      	ldrb	r4, [r7, #11]
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	881b      	ldrh	r3, [r3, #0]
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff febf 	bl	8000400 <Get_CRLH_Position>
 8000682:	4603      	mov	r3, r0
 8000684:	fa04 f203 	lsl.w	r2, r4, r3
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	431a      	orrs	r2, r3
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	601a      	str	r2, [r3, #0]
			if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	789b      	ldrb	r3, [r3, #2]
 8000696:	2b02      	cmp	r3, #2
 8000698:	d107      	bne.n	80006aa <MCAL_GPIO_Init+0x13a>
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	68db      	ldr	r3, [r3, #12]
 800069e:	683a      	ldr	r2, [r7, #0]
 80006a0:	8812      	ldrh	r2, [r2, #0]
 80006a2:	431a      	orrs	r2, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	60da      	str	r2, [r3, #12]
}
 80006a8:	e008      	b.n	80006bc <MCAL_GPIO_Init+0x14c>
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	68db      	ldr	r3, [r3, #12]
 80006ae:	683a      	ldr	r2, [r7, #0]
 80006b0:	8812      	ldrh	r2, [r2, #0]
 80006b2:	43d2      	mvns	r2, r2
 80006b4:	401a      	ands	r2, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	60da      	str	r2, [r3, #12]
}
 80006ba:	e7ff      	b.n	80006bc <MCAL_GPIO_Init+0x14c>
 80006bc:	bf00      	nop
 80006be:	3714      	adds	r7, #20
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd90      	pop	{r4, r7, pc}

080006c4 <Enable_NVIC>:
 * 							Generic Functions
 * =======================================================================================
 */

void Enable_NVIC (uint16_t IRQ)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	80fb      	strh	r3, [r7, #6]
	switch (IRQ)
 80006ce:	88fb      	ldrh	r3, [r7, #6]
 80006d0:	2b0f      	cmp	r3, #15
 80006d2:	d854      	bhi.n	800077e <Enable_NVIC+0xba>
 80006d4:	a201      	add	r2, pc, #4	; (adr r2, 80006dc <Enable_NVIC+0x18>)
 80006d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006da:	bf00      	nop
 80006dc:	0800071d 	.word	0x0800071d
 80006e0:	0800072b 	.word	0x0800072b
 80006e4:	08000739 	.word	0x08000739
 80006e8:	08000747 	.word	0x08000747
 80006ec:	08000755 	.word	0x08000755
 80006f0:	08000763 	.word	0x08000763
 80006f4:	08000763 	.word	0x08000763
 80006f8:	08000763 	.word	0x08000763
 80006fc:	08000763 	.word	0x08000763
 8000700:	08000763 	.word	0x08000763
 8000704:	08000771 	.word	0x08000771
 8000708:	08000771 	.word	0x08000771
 800070c:	08000771 	.word	0x08000771
 8000710:	08000771 	.word	0x08000771
 8000714:	08000771 	.word	0x08000771
 8000718:	08000771 	.word	0x08000771
	{
	case 0:
		NVIC_IRQ6_EXTI0_Enable ;
 800071c:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <Enable_NVIC+0xc4>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a19      	ldr	r2, [pc, #100]	; (8000788 <Enable_NVIC+0xc4>)
 8000722:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000726:	6013      	str	r3, [r2, #0]
		break;
 8000728:	e029      	b.n	800077e <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable ;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <Enable_NVIC+0xc4>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a16      	ldr	r2, [pc, #88]	; (8000788 <Enable_NVIC+0xc4>)
 8000730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000734:	6013      	str	r3, [r2, #0]
		break ;
 8000736:	e022      	b.n	800077e <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable ;
 8000738:	4b13      	ldr	r3, [pc, #76]	; (8000788 <Enable_NVIC+0xc4>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a12      	ldr	r2, [pc, #72]	; (8000788 <Enable_NVIC+0xc4>)
 800073e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000742:	6013      	str	r3, [r2, #0]
		break ;
 8000744:	e01b      	b.n	800077e <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable ;
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <Enable_NVIC+0xc4>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a0f      	ldr	r2, [pc, #60]	; (8000788 <Enable_NVIC+0xc4>)
 800074c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000750:	6013      	str	r3, [r2, #0]
		break ;
 8000752:	e014      	b.n	800077e <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Enable ;
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <Enable_NVIC+0xc4>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a0b      	ldr	r2, [pc, #44]	; (8000788 <Enable_NVIC+0xc4>)
 800075a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800075e:	6013      	str	r3, [r2, #0]
		break ;
 8000760:	e00d      	b.n	800077e <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Enable;
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <Enable_NVIC+0xc4>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a08      	ldr	r2, [pc, #32]	; (8000788 <Enable_NVIC+0xc4>)
 8000768:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800076c:	6013      	str	r3, [r2, #0]
		break ;
 800076e:	e006      	b.n	800077e <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Enable;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <Enable_NVIC+0xc8>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a05      	ldr	r2, [pc, #20]	; (800078c <Enable_NVIC+0xc8>)
 8000776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800077a:	6013      	str	r3, [r2, #0]
		break ;
 800077c:	bf00      	nop

	}
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr
 8000788:	e000e100 	.word	0xe000e100
 800078c:	e000e104 	.word	0xe000e104

08000790 <Disable_NVIC>:

void Disable_NVIC (uint16_t IRQ)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	80fb      	strh	r3, [r7, #6]
	switch (IRQ)
 800079a:	88fb      	ldrh	r3, [r7, #6]
 800079c:	2b0f      	cmp	r3, #15
 800079e:	d854      	bhi.n	800084a <Disable_NVIC+0xba>
 80007a0:	a201      	add	r2, pc, #4	; (adr r2, 80007a8 <Disable_NVIC+0x18>)
 80007a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a6:	bf00      	nop
 80007a8:	080007e9 	.word	0x080007e9
 80007ac:	080007f7 	.word	0x080007f7
 80007b0:	08000805 	.word	0x08000805
 80007b4:	08000813 	.word	0x08000813
 80007b8:	08000821 	.word	0x08000821
 80007bc:	0800082f 	.word	0x0800082f
 80007c0:	0800082f 	.word	0x0800082f
 80007c4:	0800082f 	.word	0x0800082f
 80007c8:	0800082f 	.word	0x0800082f
 80007cc:	0800082f 	.word	0x0800082f
 80007d0:	0800083d 	.word	0x0800083d
 80007d4:	0800083d 	.word	0x0800083d
 80007d8:	0800083d 	.word	0x0800083d
 80007dc:	0800083d 	.word	0x0800083d
 80007e0:	0800083d 	.word	0x0800083d
 80007e4:	0800083d 	.word	0x0800083d
		{
		case 0:
			NVIC_IRQ6_EXTI0_Disable ;
 80007e8:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <Disable_NVIC+0xc4>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a19      	ldr	r2, [pc, #100]	; (8000854 <Disable_NVIC+0xc4>)
 80007ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f2:	6013      	str	r3, [r2, #0]
			break;
 80007f4:	e029      	b.n	800084a <Disable_NVIC+0xba>
		case 1:
			NVIC_IRQ7_EXTI1_Disable ;
 80007f6:	4b17      	ldr	r3, [pc, #92]	; (8000854 <Disable_NVIC+0xc4>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a16      	ldr	r2, [pc, #88]	; (8000854 <Disable_NVIC+0xc4>)
 80007fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000800:	6013      	str	r3, [r2, #0]
			break ;
 8000802:	e022      	b.n	800084a <Disable_NVIC+0xba>
		case 2:
			NVIC_IRQ8_EXTI2_Disable ;
 8000804:	4b13      	ldr	r3, [pc, #76]	; (8000854 <Disable_NVIC+0xc4>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a12      	ldr	r2, [pc, #72]	; (8000854 <Disable_NVIC+0xc4>)
 800080a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800080e:	6013      	str	r3, [r2, #0]
			break ;
 8000810:	e01b      	b.n	800084a <Disable_NVIC+0xba>
		case 3:
			NVIC_IRQ9_EXTI3_Disable ;
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <Disable_NVIC+0xc4>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a0f      	ldr	r2, [pc, #60]	; (8000854 <Disable_NVIC+0xc4>)
 8000818:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800081c:	6013      	str	r3, [r2, #0]
			break ;
 800081e:	e014      	b.n	800084a <Disable_NVIC+0xba>
		case 4:
			NVIC_IRQ10_EXTI4_Disable ;
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <Disable_NVIC+0xc4>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a0b      	ldr	r2, [pc, #44]	; (8000854 <Disable_NVIC+0xc4>)
 8000826:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800082a:	6013      	str	r3, [r2, #0]
			break ;
 800082c:	e00d      	b.n	800084a <Disable_NVIC+0xba>
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:
			NVIC_IRQ23_EXTI5_9_Disable;
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <Disable_NVIC+0xc4>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a08      	ldr	r2, [pc, #32]	; (8000854 <Disable_NVIC+0xc4>)
 8000834:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000838:	6013      	str	r3, [r2, #0]
			break ;
 800083a:	e006      	b.n	800084a <Disable_NVIC+0xba>
		case 11:
		case 12:
		case 13:
		case 14:
		case 15:
			NVIC_IRQ40_EXTI10_15_Disable;
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <Disable_NVIC+0xc8>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a05      	ldr	r2, [pc, #20]	; (8000858 <Disable_NVIC+0xc8>)
 8000842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000846:	6013      	str	r3, [r2, #0]
			break ;
 8000848:	bf00      	nop

		}

}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr
 8000854:	e000e180 	.word	0xe000e180
 8000858:	e000e184 	.word	0xe000e184

0800085c <Update_EXTI>:




void Update_EXTI (EXTI_PinConfig_t* EXTI_Config)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	//1- Configure GPIO to be AF Input -> Floating INPUT

	GPIO_PinConfig_t PinCfg ;
	//Update the GPIO Pin To Be Floating Input
	PinCfg.GPIO_PinNumber = EXTI_Config->EXTI_PIN.GPIO_PIN;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	891b      	ldrh	r3, [r3, #8]
 8000868:	813b      	strh	r3, [r7, #8]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
 800086a:	2301      	movs	r3, #1
 800086c:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config->EXTI_PIN.GPIO_Port , &PinCfg);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	f107 0208 	add.w	r2, r7, #8
 8000876:	4611      	mov	r1, r2
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff fe79 	bl	8000570 <MCAL_GPIO_Init>
	//==============================================

	//2- UPDATE AFIO to Route between EXTI Line with PORT A,B,C,D

	uint8_t  AFIO_EXTICR_index = EXTI_Config->EXTI_PIN.ETI_InputLineNumber / 4 ;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	881b      	ldrh	r3, [r3, #0]
 8000882:	089b      	lsrs	r3, r3, #2
 8000884:	b29b      	uxth	r3, r3
 8000886:	73fb      	strb	r3, [r7, #15]

	uint8_t	AFIO_EXTICR_Postion = (EXTI_Config->EXTI_PIN.ETI_InputLineNumber % 4) * 4 ;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	881b      	ldrh	r3, [r3, #0]
 800088c:	b2db      	uxtb	r3, r3
 800088e:	f003 0303 	and.w	r3, r3, #3
 8000892:	b2db      	uxtb	r3, r3
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	73bb      	strb	r3, [r7, #14]

	//clear the four bit
	AFIO->EXTICR[AFIO_EXTICR_index ] &= ~(0xF <<AFIO_EXTICR_Postion );
 8000898:	4a5f      	ldr	r2, [pc, #380]	; (8000a18 <Update_EXTI+0x1bc>)
 800089a:	7bfb      	ldrb	r3, [r7, #15]
 800089c:	3302      	adds	r3, #2
 800089e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008a2:	7bbb      	ldrb	r3, [r7, #14]
 80008a4:	210f      	movs	r1, #15
 80008a6:	fa01 f303 	lsl.w	r3, r1, r3
 80008aa:	43db      	mvns	r3, r3
 80008ac:	4618      	mov	r0, r3
 80008ae:	495a      	ldr	r1, [pc, #360]	; (8000a18 <Update_EXTI+0x1bc>)
 80008b0:	7bfb      	ldrb	r3, [r7, #15]
 80008b2:	4002      	ands	r2, r0
 80008b4:	3302      	adds	r3, #2
 80008b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	AFIO->EXTICR[AFIO_EXTICR_index ] |= ((AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_PIN.GPIO_Port) &0xF) << AFIO_EXTICR_Postion);
 80008ba:	4a57      	ldr	r2, [pc, #348]	; (8000a18 <Update_EXTI+0x1bc>)
 80008bc:	7bfb      	ldrb	r3, [r7, #15]
 80008be:	3302      	adds	r3, #2
 80008c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	4954      	ldr	r1, [pc, #336]	; (8000a1c <Update_EXTI+0x1c0>)
 80008ca:	428b      	cmp	r3, r1
 80008cc:	d016      	beq.n	80008fc <Update_EXTI+0xa0>
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	4953      	ldr	r1, [pc, #332]	; (8000a20 <Update_EXTI+0x1c4>)
 80008d4:	428b      	cmp	r3, r1
 80008d6:	d00f      	beq.n	80008f8 <Update_EXTI+0x9c>
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	4951      	ldr	r1, [pc, #324]	; (8000a24 <Update_EXTI+0x1c8>)
 80008de:	428b      	cmp	r3, r1
 80008e0:	d008      	beq.n	80008f4 <Update_EXTI+0x98>
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	4950      	ldr	r1, [pc, #320]	; (8000a28 <Update_EXTI+0x1cc>)
 80008e8:	428b      	cmp	r3, r1
 80008ea:	d101      	bne.n	80008f0 <Update_EXTI+0x94>
 80008ec:	2303      	movs	r3, #3
 80008ee:	e006      	b.n	80008fe <Update_EXTI+0xa2>
 80008f0:	2300      	movs	r3, #0
 80008f2:	e004      	b.n	80008fe <Update_EXTI+0xa2>
 80008f4:	2302      	movs	r3, #2
 80008f6:	e002      	b.n	80008fe <Update_EXTI+0xa2>
 80008f8:	2301      	movs	r3, #1
 80008fa:	e000      	b.n	80008fe <Update_EXTI+0xa2>
 80008fc:	2300      	movs	r3, #0
 80008fe:	7bb9      	ldrb	r1, [r7, #14]
 8000900:	408b      	lsls	r3, r1
 8000902:	4618      	mov	r0, r3
 8000904:	4944      	ldr	r1, [pc, #272]	; (8000a18 <Update_EXTI+0x1bc>)
 8000906:	7bfb      	ldrb	r3, [r7, #15]
 8000908:	4302      	orrs	r2, r0
 800090a:	3302      	adds	r3, #2
 800090c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//==============================================

	//3- Update Rising or falling Register
	EXTI->RTSR &= ~(1<< EXTI_Config->EXTI_PIN.ETI_InputLineNumber);
 8000910:	4b46      	ldr	r3, [pc, #280]	; (8000a2c <Update_EXTI+0x1d0>)
 8000912:	689b      	ldr	r3, [r3, #8]
 8000914:	687a      	ldr	r2, [r7, #4]
 8000916:	8812      	ldrh	r2, [r2, #0]
 8000918:	4611      	mov	r1, r2
 800091a:	2201      	movs	r2, #1
 800091c:	408a      	lsls	r2, r1
 800091e:	43d2      	mvns	r2, r2
 8000920:	4611      	mov	r1, r2
 8000922:	4a42      	ldr	r2, [pc, #264]	; (8000a2c <Update_EXTI+0x1d0>)
 8000924:	400b      	ands	r3, r1
 8000926:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1<< EXTI_Config->EXTI_PIN.ETI_InputLineNumber);
 8000928:	4b40      	ldr	r3, [pc, #256]	; (8000a2c <Update_EXTI+0x1d0>)
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	8812      	ldrh	r2, [r2, #0]
 8000930:	4611      	mov	r1, r2
 8000932:	2201      	movs	r2, #1
 8000934:	408a      	lsls	r2, r1
 8000936:	43d2      	mvns	r2, r2
 8000938:	4611      	mov	r1, r2
 800093a:	4a3c      	ldr	r2, [pc, #240]	; (8000a2c <Update_EXTI+0x1d0>)
 800093c:	400b      	ands	r3, r1
 800093e:	60d3      	str	r3, [r2, #12]

	if (EXTI_Config->Trigger_Case == EXTI_Trigger_RISING)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	7b1b      	ldrb	r3, [r3, #12]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d10b      	bne.n	8000960 <Update_EXTI+0x104>
	{
		EXTI->RTSR |=  (1<< EXTI_Config->EXTI_PIN.ETI_InputLineNumber);
 8000948:	4b38      	ldr	r3, [pc, #224]	; (8000a2c <Update_EXTI+0x1d0>)
 800094a:	689b      	ldr	r3, [r3, #8]
 800094c:	687a      	ldr	r2, [r7, #4]
 800094e:	8812      	ldrh	r2, [r2, #0]
 8000950:	4611      	mov	r1, r2
 8000952:	2201      	movs	r2, #1
 8000954:	408a      	lsls	r2, r1
 8000956:	4611      	mov	r1, r2
 8000958:	4a34      	ldr	r2, [pc, #208]	; (8000a2c <Update_EXTI+0x1d0>)
 800095a:	430b      	orrs	r3, r1
 800095c:	6093      	str	r3, [r2, #8]
 800095e:	e029      	b.n	80009b4 <Update_EXTI+0x158>

	}else if  (EXTI_Config->Trigger_Case == EXTI_Trigger_FALLING)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	7b1b      	ldrb	r3, [r3, #12]
 8000964:	2b01      	cmp	r3, #1
 8000966:	d10b      	bne.n	8000980 <Update_EXTI+0x124>
	{
		EXTI->FTSR |= (1<< EXTI_Config->EXTI_PIN.ETI_InputLineNumber);
 8000968:	4b30      	ldr	r3, [pc, #192]	; (8000a2c <Update_EXTI+0x1d0>)
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	687a      	ldr	r2, [r7, #4]
 800096e:	8812      	ldrh	r2, [r2, #0]
 8000970:	4611      	mov	r1, r2
 8000972:	2201      	movs	r2, #1
 8000974:	408a      	lsls	r2, r1
 8000976:	4611      	mov	r1, r2
 8000978:	4a2c      	ldr	r2, [pc, #176]	; (8000a2c <Update_EXTI+0x1d0>)
 800097a:	430b      	orrs	r3, r1
 800097c:	60d3      	str	r3, [r2, #12]
 800097e:	e019      	b.n	80009b4 <Update_EXTI+0x158>


	}else if  (EXTI_Config->Trigger_Case == EXTI_Trigger_RisingAndFalling)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	7b1b      	ldrb	r3, [r3, #12]
 8000984:	2b02      	cmp	r3, #2
 8000986:	d115      	bne.n	80009b4 <Update_EXTI+0x158>
	{
		EXTI->RTSR |=  (1<< EXTI_Config->EXTI_PIN.ETI_InputLineNumber);
 8000988:	4b28      	ldr	r3, [pc, #160]	; (8000a2c <Update_EXTI+0x1d0>)
 800098a:	689b      	ldr	r3, [r3, #8]
 800098c:	687a      	ldr	r2, [r7, #4]
 800098e:	8812      	ldrh	r2, [r2, #0]
 8000990:	4611      	mov	r1, r2
 8000992:	2201      	movs	r2, #1
 8000994:	408a      	lsls	r2, r1
 8000996:	4611      	mov	r1, r2
 8000998:	4a24      	ldr	r2, [pc, #144]	; (8000a2c <Update_EXTI+0x1d0>)
 800099a:	430b      	orrs	r3, r1
 800099c:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1<< EXTI_Config->EXTI_PIN.ETI_InputLineNumber);
 800099e:	4b23      	ldr	r3, [pc, #140]	; (8000a2c <Update_EXTI+0x1d0>)
 80009a0:	68db      	ldr	r3, [r3, #12]
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	8812      	ldrh	r2, [r2, #0]
 80009a6:	4611      	mov	r1, r2
 80009a8:	2201      	movs	r2, #1
 80009aa:	408a      	lsls	r2, r1
 80009ac:	4611      	mov	r1, r2
 80009ae:	4a1f      	ldr	r2, [pc, #124]	; (8000a2c <Update_EXTI+0x1d0>)
 80009b0:	430b      	orrs	r3, r1
 80009b2:	60d3      	str	r3, [r2, #12]
	}

	//==============================================
	//4- Update IRQ Handling CALLBACK

	GP_IRQ_CallBack[EXTI_Config->EXTI_PIN.ETI_InputLineNumber] = EXTI_Config->P_IRQ_CallBack ;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	881b      	ldrh	r3, [r3, #0]
 80009b8:	4619      	mov	r1, r3
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	691b      	ldr	r3, [r3, #16]
 80009be:	4a1c      	ldr	r2, [pc, #112]	; (8000a30 <Update_EXTI+0x1d4>)
 80009c0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	//==============================================
	//5- Enable/Disable IRQ EXTI & NVIC

	if (EXTI_Config->IRQ_EN == EXTI_IRQ_Enable )
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	7b5b      	ldrb	r3, [r3, #13]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d110      	bne.n	80009ee <Update_EXTI+0x192>
	{
		EXTI->IMR |= (1<< EXTI_Config->EXTI_PIN.ETI_InputLineNumber );
 80009cc:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <Update_EXTI+0x1d0>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	687a      	ldr	r2, [r7, #4]
 80009d2:	8812      	ldrh	r2, [r2, #0]
 80009d4:	4611      	mov	r1, r2
 80009d6:	2201      	movs	r2, #1
 80009d8:	408a      	lsls	r2, r1
 80009da:	4611      	mov	r1, r2
 80009dc:	4a13      	ldr	r2, [pc, #76]	; (8000a2c <Update_EXTI+0x1d0>)
 80009de:	430b      	orrs	r3, r1
 80009e0:	6013      	str	r3, [r2, #0]
		Enable_NVIC (EXTI_Config->EXTI_PIN.ETI_InputLineNumber ) ;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	881b      	ldrh	r3, [r3, #0]
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff fe6c 	bl	80006c4 <Enable_NVIC>
	}else
	{
		EXTI->IMR &= ~(1<< EXTI_Config->EXTI_PIN.ETI_InputLineNumber );
		Disable_NVIC (EXTI_Config->EXTI_PIN.ETI_InputLineNumber) ;
	}
}
 80009ec:	e010      	b.n	8000a10 <Update_EXTI+0x1b4>
		EXTI->IMR &= ~(1<< EXTI_Config->EXTI_PIN.ETI_InputLineNumber );
 80009ee:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <Update_EXTI+0x1d0>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	687a      	ldr	r2, [r7, #4]
 80009f4:	8812      	ldrh	r2, [r2, #0]
 80009f6:	4611      	mov	r1, r2
 80009f8:	2201      	movs	r2, #1
 80009fa:	408a      	lsls	r2, r1
 80009fc:	43d2      	mvns	r2, r2
 80009fe:	4611      	mov	r1, r2
 8000a00:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <Update_EXTI+0x1d0>)
 8000a02:	400b      	ands	r3, r1
 8000a04:	6013      	str	r3, [r2, #0]
		Disable_NVIC (EXTI_Config->EXTI_PIN.ETI_InputLineNumber) ;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	881b      	ldrh	r3, [r3, #0]
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff fec0 	bl	8000790 <Disable_NVIC>
}
 8000a10:	bf00      	nop
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40010000 	.word	0x40010000
 8000a1c:	40010800 	.word	0x40010800
 8000a20:	40010c00 	.word	0x40010c00
 8000a24:	40011000 	.word	0x40011000
 8000a28:	40011400 	.word	0x40011400
 8000a2c:	40010400 	.word	0x40010400
 8000a30:	20000038 	.word	0x20000038

08000a34 <MCAL_EXTI_GPIO_Init>:
 * Note				-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				 	But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 * 				 	- Also Mandatory to Enable RCC Clock for AFIO and the corresponding GPIO
 */
void MCAL_EXTI_GPIO_Init (EXTI_PinConfig_t* EXTI_Config)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	Update_EXTI(EXTI_Config) ;
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f7ff ff0d 	bl	800085c <Update_EXTI>
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <EXTI0_IRQHandler>:
///**===========			ISR  Functions        =========================
///**================================================================
// */

void EXTI0_IRQHandler (void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
	//cleared by writing a ‘1’ into the bit Pending register (EXTI_PR)
	EXTI->PR |= 1<<0 ;
 8000a50:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <EXTI0_IRQHandler+0x1c>)
 8000a52:	695b      	ldr	r3, [r3, #20]
 8000a54:	4a04      	ldr	r2, [pc, #16]	; (8000a68 <EXTI0_IRQHandler+0x1c>)
 8000a56:	f043 0301 	orr.w	r3, r3, #1
 8000a5a:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALL
	GP_IRQ_CallBack[0]() ;
 8000a5c:	4b03      	ldr	r3, [pc, #12]	; (8000a6c <EXTI0_IRQHandler+0x20>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4798      	blx	r3
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40010400 	.word	0x40010400
 8000a6c:	20000038 	.word	0x20000038

08000a70 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler (void) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<1) ;
 8000a74:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <EXTI1_IRQHandler+0x1c>)
 8000a76:	695b      	ldr	r3, [r3, #20]
 8000a78:	4a04      	ldr	r2, [pc, #16]	; (8000a8c <EXTI1_IRQHandler+0x1c>)
 8000a7a:	f043 0302 	orr.w	r3, r3, #2
 8000a7e:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[1]() ; }
 8000a80:	4b03      	ldr	r3, [pc, #12]	; (8000a90 <EXTI1_IRQHandler+0x20>)
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	4798      	blx	r3
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40010400 	.word	0x40010400
 8000a90:	20000038 	.word	0x20000038

08000a94 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler (void) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<2) ;
 8000a98:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <EXTI2_IRQHandler+0x1c>)
 8000a9a:	695b      	ldr	r3, [r3, #20]
 8000a9c:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <EXTI2_IRQHandler+0x1c>)
 8000a9e:	f043 0304 	orr.w	r3, r3, #4
 8000aa2:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[2]() ; }
 8000aa4:	4b03      	ldr	r3, [pc, #12]	; (8000ab4 <EXTI2_IRQHandler+0x20>)
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	4798      	blx	r3
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40010400 	.word	0x40010400
 8000ab4:	20000038 	.word	0x20000038

08000ab8 <EXTI3_IRQHandler>:


void EXTI3_IRQHandler (void) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<3) ;
 8000abc:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <EXTI3_IRQHandler+0x1c>)
 8000abe:	695b      	ldr	r3, [r3, #20]
 8000ac0:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <EXTI3_IRQHandler+0x1c>)
 8000ac2:	f043 0308 	orr.w	r3, r3, #8
 8000ac6:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[3]() ; }
 8000ac8:	4b03      	ldr	r3, [pc, #12]	; (8000ad8 <EXTI3_IRQHandler+0x20>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	4798      	blx	r3
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40010400 	.word	0x40010400
 8000ad8:	20000038 	.word	0x20000038

08000adc <EXTI4_IRQHandler>:


void EXTI4_IRQHandler (void) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<4) ;
 8000ae0:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <EXTI4_IRQHandler+0x1c>)
 8000ae2:	695b      	ldr	r3, [r3, #20]
 8000ae4:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <EXTI4_IRQHandler+0x1c>)
 8000ae6:	f043 0310 	orr.w	r3, r3, #16
 8000aea:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]() ; }
 8000aec:	4b03      	ldr	r3, [pc, #12]	; (8000afc <EXTI4_IRQHandler+0x20>)
 8000aee:	691b      	ldr	r3, [r3, #16]
 8000af0:	4798      	blx	r3
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40010400 	.word	0x40010400
 8000afc:	20000038 	.word	0x20000038

08000b00 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler (void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<5 ) {	EXTI->PR |=  (1<<5)    ; GP_IRQ_CallBack[5]() ;   }
 8000b04:	4b26      	ldr	r3, [pc, #152]	; (8000ba0 <EXTI9_5_IRQHandler+0xa0>)
 8000b06:	695b      	ldr	r3, [r3, #20]
 8000b08:	f003 0320 	and.w	r3, r3, #32
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d008      	beq.n	8000b22 <EXTI9_5_IRQHandler+0x22>
 8000b10:	4b23      	ldr	r3, [pc, #140]	; (8000ba0 <EXTI9_5_IRQHandler+0xa0>)
 8000b12:	695b      	ldr	r3, [r3, #20]
 8000b14:	4a22      	ldr	r2, [pc, #136]	; (8000ba0 <EXTI9_5_IRQHandler+0xa0>)
 8000b16:	f043 0320 	orr.w	r3, r3, #32
 8000b1a:	6153      	str	r3, [r2, #20]
 8000b1c:	4b21      	ldr	r3, [pc, #132]	; (8000ba4 <EXTI9_5_IRQHandler+0xa4>)
 8000b1e:	695b      	ldr	r3, [r3, #20]
 8000b20:	4798      	blx	r3
	if (EXTI->PR & 1<<6 ) {	EXTI->PR |=  (1<<6)    ; GP_IRQ_CallBack[6]() ;   }
 8000b22:	4b1f      	ldr	r3, [pc, #124]	; (8000ba0 <EXTI9_5_IRQHandler+0xa0>)
 8000b24:	695b      	ldr	r3, [r3, #20]
 8000b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d008      	beq.n	8000b40 <EXTI9_5_IRQHandler+0x40>
 8000b2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <EXTI9_5_IRQHandler+0xa0>)
 8000b30:	695b      	ldr	r3, [r3, #20]
 8000b32:	4a1b      	ldr	r2, [pc, #108]	; (8000ba0 <EXTI9_5_IRQHandler+0xa0>)
 8000b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b38:	6153      	str	r3, [r2, #20]
 8000b3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <EXTI9_5_IRQHandler+0xa4>)
 8000b3c:	699b      	ldr	r3, [r3, #24]
 8000b3e:	4798      	blx	r3
	if (EXTI->PR & 1<<7 ) {	EXTI->PR |=  (1<<7)    ; GP_IRQ_CallBack[7]() ;   }
 8000b40:	4b17      	ldr	r3, [pc, #92]	; (8000ba0 <EXTI9_5_IRQHandler+0xa0>)
 8000b42:	695b      	ldr	r3, [r3, #20]
 8000b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d008      	beq.n	8000b5e <EXTI9_5_IRQHandler+0x5e>
 8000b4c:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <EXTI9_5_IRQHandler+0xa0>)
 8000b4e:	695b      	ldr	r3, [r3, #20]
 8000b50:	4a13      	ldr	r2, [pc, #76]	; (8000ba0 <EXTI9_5_IRQHandler+0xa0>)
 8000b52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b56:	6153      	str	r3, [r2, #20]
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <EXTI9_5_IRQHandler+0xa4>)
 8000b5a:	69db      	ldr	r3, [r3, #28]
 8000b5c:	4798      	blx	r3
	if (EXTI->PR & 1<<8 ) {	EXTI->PR |=  (1<<8)    ; GP_IRQ_CallBack[8]() ;   }
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <EXTI9_5_IRQHandler+0xa0>)
 8000b60:	695b      	ldr	r3, [r3, #20]
 8000b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d008      	beq.n	8000b7c <EXTI9_5_IRQHandler+0x7c>
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <EXTI9_5_IRQHandler+0xa0>)
 8000b6c:	695b      	ldr	r3, [r3, #20]
 8000b6e:	4a0c      	ldr	r2, [pc, #48]	; (8000ba0 <EXTI9_5_IRQHandler+0xa0>)
 8000b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b74:	6153      	str	r3, [r2, #20]
 8000b76:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <EXTI9_5_IRQHandler+0xa4>)
 8000b78:	6a1b      	ldr	r3, [r3, #32]
 8000b7a:	4798      	blx	r3
	if (EXTI->PR & 1<<9 ) {	EXTI->PR |=  (1<<9)    ; GP_IRQ_CallBack[9]() ;   }
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <EXTI9_5_IRQHandler+0xa0>)
 8000b7e:	695b      	ldr	r3, [r3, #20]
 8000b80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d008      	beq.n	8000b9a <EXTI9_5_IRQHandler+0x9a>
 8000b88:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <EXTI9_5_IRQHandler+0xa0>)
 8000b8a:	695b      	ldr	r3, [r3, #20]
 8000b8c:	4a04      	ldr	r2, [pc, #16]	; (8000ba0 <EXTI9_5_IRQHandler+0xa0>)
 8000b8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b92:	6153      	str	r3, [r2, #20]
 8000b94:	4b03      	ldr	r3, [pc, #12]	; (8000ba4 <EXTI9_5_IRQHandler+0xa4>)
 8000b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b98:	4798      	blx	r3

}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40010400 	.word	0x40010400
 8000ba4:	20000038 	.word	0x20000038

08000ba8 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<10 ) {	EXTI->PR |=  (1<<10)    ; GP_IRQ_CallBack[10]() ;   }
 8000bac:	4b2d      	ldr	r3, [pc, #180]	; (8000c64 <EXTI15_10_IRQHandler+0xbc>)
 8000bae:	695b      	ldr	r3, [r3, #20]
 8000bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d008      	beq.n	8000bca <EXTI15_10_IRQHandler+0x22>
 8000bb8:	4b2a      	ldr	r3, [pc, #168]	; (8000c64 <EXTI15_10_IRQHandler+0xbc>)
 8000bba:	695b      	ldr	r3, [r3, #20]
 8000bbc:	4a29      	ldr	r2, [pc, #164]	; (8000c64 <EXTI15_10_IRQHandler+0xbc>)
 8000bbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bc2:	6153      	str	r3, [r2, #20]
 8000bc4:	4b28      	ldr	r3, [pc, #160]	; (8000c68 <EXTI15_10_IRQHandler+0xc0>)
 8000bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc8:	4798      	blx	r3
	if (EXTI->PR & 1<<11 ) {	EXTI->PR |=  (1<<11)    ; GP_IRQ_CallBack[11]() ;   }
 8000bca:	4b26      	ldr	r3, [pc, #152]	; (8000c64 <EXTI15_10_IRQHandler+0xbc>)
 8000bcc:	695b      	ldr	r3, [r3, #20]
 8000bce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d008      	beq.n	8000be8 <EXTI15_10_IRQHandler+0x40>
 8000bd6:	4b23      	ldr	r3, [pc, #140]	; (8000c64 <EXTI15_10_IRQHandler+0xbc>)
 8000bd8:	695b      	ldr	r3, [r3, #20]
 8000bda:	4a22      	ldr	r2, [pc, #136]	; (8000c64 <EXTI15_10_IRQHandler+0xbc>)
 8000bdc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000be0:	6153      	str	r3, [r2, #20]
 8000be2:	4b21      	ldr	r3, [pc, #132]	; (8000c68 <EXTI15_10_IRQHandler+0xc0>)
 8000be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000be6:	4798      	blx	r3
	if (EXTI->PR & 1<<12 ) {	EXTI->PR |=  (1<<12)    ; GP_IRQ_CallBack[12]() ;   }
 8000be8:	4b1e      	ldr	r3, [pc, #120]	; (8000c64 <EXTI15_10_IRQHandler+0xbc>)
 8000bea:	695b      	ldr	r3, [r3, #20]
 8000bec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d008      	beq.n	8000c06 <EXTI15_10_IRQHandler+0x5e>
 8000bf4:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <EXTI15_10_IRQHandler+0xbc>)
 8000bf6:	695b      	ldr	r3, [r3, #20]
 8000bf8:	4a1a      	ldr	r2, [pc, #104]	; (8000c64 <EXTI15_10_IRQHandler+0xbc>)
 8000bfa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bfe:	6153      	str	r3, [r2, #20]
 8000c00:	4b19      	ldr	r3, [pc, #100]	; (8000c68 <EXTI15_10_IRQHandler+0xc0>)
 8000c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c04:	4798      	blx	r3
	if (EXTI->PR & 1<<13 ) {	EXTI->PR |=  (1<<13)    ; GP_IRQ_CallBack[13]() ;   }
 8000c06:	4b17      	ldr	r3, [pc, #92]	; (8000c64 <EXTI15_10_IRQHandler+0xbc>)
 8000c08:	695b      	ldr	r3, [r3, #20]
 8000c0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d008      	beq.n	8000c24 <EXTI15_10_IRQHandler+0x7c>
 8000c12:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <EXTI15_10_IRQHandler+0xbc>)
 8000c14:	695b      	ldr	r3, [r3, #20]
 8000c16:	4a13      	ldr	r2, [pc, #76]	; (8000c64 <EXTI15_10_IRQHandler+0xbc>)
 8000c18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c1c:	6153      	str	r3, [r2, #20]
 8000c1e:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <EXTI15_10_IRQHandler+0xc0>)
 8000c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c22:	4798      	blx	r3
	if (EXTI->PR & 1<<14 ) {	EXTI->PR |=  (1<<14)    ; GP_IRQ_CallBack[14]() ;   }
 8000c24:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <EXTI15_10_IRQHandler+0xbc>)
 8000c26:	695b      	ldr	r3, [r3, #20]
 8000c28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d008      	beq.n	8000c42 <EXTI15_10_IRQHandler+0x9a>
 8000c30:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <EXTI15_10_IRQHandler+0xbc>)
 8000c32:	695b      	ldr	r3, [r3, #20]
 8000c34:	4a0b      	ldr	r2, [pc, #44]	; (8000c64 <EXTI15_10_IRQHandler+0xbc>)
 8000c36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c3a:	6153      	str	r3, [r2, #20]
 8000c3c:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <EXTI15_10_IRQHandler+0xc0>)
 8000c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c40:	4798      	blx	r3
	if (EXTI->PR & 1<<15 ) {	EXTI->PR |=  (1<<15)    ; GP_IRQ_CallBack[15]() ;   }
 8000c42:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <EXTI15_10_IRQHandler+0xbc>)
 8000c44:	695b      	ldr	r3, [r3, #20]
 8000c46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d008      	beq.n	8000c60 <EXTI15_10_IRQHandler+0xb8>
 8000c4e:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <EXTI15_10_IRQHandler+0xbc>)
 8000c50:	695b      	ldr	r3, [r3, #20]
 8000c52:	4a04      	ldr	r2, [pc, #16]	; (8000c64 <EXTI15_10_IRQHandler+0xbc>)
 8000c54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c58:	6153      	str	r3, [r2, #20]
 8000c5a:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <EXTI15_10_IRQHandler+0xc0>)
 8000c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c5e:	4798      	blx	r3

}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40010400 	.word	0x40010400
 8000c68:	20000038 	.word	0x20000038

08000c6c <I2C1_ER_IRQHandler>:
	return (uint8_t) I2Cx->DR;
}


void I2C1_ER_IRQHandler (void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0

}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr

08000c78 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler (void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
	volatile uint32_t dummy_read = 0 ;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	607b      	str	r3, [r7, #4]
	I2C_TypeDef* I2Cx = I2C1 ;
 8000c82:	4b37      	ldr	r3, [pc, #220]	; (8000d60 <I2C1_EV_IRQHandler+0xe8>)
 8000c84:	617b      	str	r3, [r7, #20]
	//Interrupt handling for both master and slave mode of a device
	uint32_t temp1, temp2, temp3;

	temp1   = I2Cx->CR2 & (  I2C_CR2_ITEVTEN) ;
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c8e:	613b      	str	r3, [r7, #16]
	temp2   = I2Cx->CR2 & ( I2C_CR2_ITBUFEN) ;
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c98:	60fb      	str	r3, [r7, #12]
	temp3  = I2Cx->SR1 & ( I2C_SR1_STOPF);
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	695b      	ldr	r3, [r3, #20]
 8000c9e:	f003 0310 	and.w	r3, r3, #16
 8000ca2:	60bb      	str	r3, [r7, #8]


	// Handle For interrupt generated by STOPF event
		// Note : Stop detection flag is applicable only slave mode
		if(temp1 && temp3)
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d00a      	beq.n	8000cc0 <I2C1_EV_IRQHandler+0x48>
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d007      	beq.n	8000cc0 <I2C1_EV_IRQHandler+0x48>
		{
			//STOF flag is set
			//Clear the STOPF ( i.e 1) read SR1 2) Write to CR1 )
			I2Cx->CR1 |= 0x0000;
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	601a      	str	r2, [r3, #0]
			Slave_States(I2Cx,I2C_EV_STOP);
 8000cb8:	2100      	movs	r1, #0
 8000cba:	6978      	ldr	r0, [r7, #20]
 8000cbc:	f000 f852 	bl	8000d64 <Slave_States>


		}
		//----------------------------------------------------------
		temp3  = I2Cx->SR1 & (I2C_SR1_ADDR);
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	695b      	ldr	r3, [r3, #20]
 8000cc4:	f003 0302 	and.w	r3, r3, #2
 8000cc8:	60bb      	str	r3, [r7, #8]
		// Handle For interrupt generated by ADDR event
		//Note : When master mode : Address is sent
		//		 When Slave mode   : Address matched with own address
		if(temp1 && temp3)
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d012      	beq.n	8000cf6 <I2C1_EV_IRQHandler+0x7e>
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d00f      	beq.n	8000cf6 <I2C1_EV_IRQHandler+0x7e>
		{
			// interrupt is generated because of ADDR event
			//check for device mode
			if(I2Cx->SR2 & ( I2C_SR2_MSL))
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d109      	bne.n	8000cf6 <I2C1_EV_IRQHandler+0x7e>

			}else
			{
				//slave mode
				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = I2Cx->SR1;
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	695b      	ldr	r3, [r3, #20]
 8000ce6:	607b      	str	r3, [r7, #4]
				dummy_read = I2Cx->SR2;
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	607b      	str	r3, [r7, #4]
				Slave_States(I2Cx,I2C_EV_ADDR_Matched);
 8000cee:	2102      	movs	r1, #2
 8000cf0:	6978      	ldr	r0, [r7, #20]
 8000cf2:	f000 f837 	bl	8000d64 <Slave_States>

			}
		}
		//----------------------------------------------------------

		temp3  = I2Cx->SR1 & ( I2C_SR1_TXE);
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	695b      	ldr	r3, [r3, #20]
 8000cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cfe:	60bb      	str	r3, [r7, #8]
		// Handle For interrupt generated by TXE event
		if(temp1 && temp2 && temp3)
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d00f      	beq.n	8000d26 <I2C1_EV_IRQHandler+0xae>
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d00c      	beq.n	8000d26 <I2C1_EV_IRQHandler+0xae>
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d009      	beq.n	8000d26 <I2C1_EV_IRQHandler+0xae>
		{
			//Check for device mode
			if(I2Cx->SR2 & (I2C_SR2_MSL))
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	699b      	ldr	r3, [r3, #24]
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d103      	bne.n	8000d26 <I2C1_EV_IRQHandler+0xae>
			{

			}else
			{
				//slave
				Slave_States(I2Cx,I2C_EV_DATA_REQ);
 8000d1e:	2103      	movs	r1, #3
 8000d20:	6978      	ldr	r0, [r7, #20]
 8000d22:	f000 f81f 	bl	8000d64 <Slave_States>
			}
		}

		//----------------------------------------------------------

		temp3  = I2Cx->SR1 & ( I2C_SR1_RXNE);
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	695b      	ldr	r3, [r3, #20]
 8000d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d2e:	60bb      	str	r3, [r7, #8]
		// Handle For interrupt generated by 	SB=1, cleared by reading SR1 register followed by writing DR register with Address.
		if(temp1 && temp2 && temp3)
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d00f      	beq.n	8000d56 <I2C1_EV_IRQHandler+0xde>
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d00c      	beq.n	8000d56 <I2C1_EV_IRQHandler+0xde>
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d009      	beq.n	8000d56 <I2C1_EV_IRQHandler+0xde>
		{
			//check device mode .
			if(I2Cx->SR2 & ( I2C_SR2_MSL))
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	699b      	ldr	r3, [r3, #24]
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d103      	bne.n	8000d56 <I2C1_EV_IRQHandler+0xde>
				//The device is master

			}else
			{
				//slave
				Slave_States(I2Cx,I2C_EV_DATA_RCV);
 8000d4e:	2104      	movs	r1, #4
 8000d50:	6978      	ldr	r0, [r7, #20]
 8000d52:	f000 f807 	bl	8000d64 <Slave_States>
			}
		}



}
 8000d56:	bf00      	nop
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40005400 	.word	0x40005400

08000d64 <Slave_States>:


void Slave_States (I2C_TypeDef* I2Cx  ,Slave_State state)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	70fb      	strb	r3, [r7, #3]
	uint8_t index =    I2Cx == I2C1 ? I2C1_INDEX: I2C2_INDEX ;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a32      	ldr	r2, [pc, #200]	; (8000e3c <Slave_States+0xd8>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	bf14      	ite	ne
 8000d78:	2301      	movne	r3, #1
 8000d7a:	2300      	moveq	r3, #0
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	73fb      	strb	r3, [r7, #15]

	switch (state)
 8000d80:	78fb      	ldrb	r3, [r7, #3]
 8000d82:	2b04      	cmp	r3, #4
 8000d84:	d856      	bhi.n	8000e34 <Slave_States+0xd0>
 8000d86:	a201      	add	r2, pc, #4	; (adr r2, 8000d8c <Slave_States+0x28>)
 8000d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d8c:	08000da7 	.word	0x08000da7
 8000d90:	08000da1 	.word	0x08000da1
 8000d94:	08000dcb 	.word	0x08000dcb
 8000d98:	08000de3 	.word	0x08000de3
 8000d9c:	08000e07 	.word	0x08000e07
	{

	case I2C_ERROR_AF:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	699b      	ldr	r3, [r3, #24]
		{
			//Slave Shouldn't Send anything else

		}

		break ;
 8000da4:	e046      	b.n	8000e34 <Slave_States+0xd0>
	}

	case I2C_EV_STOP:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	699b      	ldr	r3, [r3, #24]
 8000daa:	f003 0304 	and.w	r3, r3, #4
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d03b      	beq.n	8000e2a <Slave_States+0xc6>
		{
			//Notify APP that the Stop Condition is sent by the master
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_STOP) ;
 8000db2:	7bfa      	ldrb	r2, [r7, #15]
 8000db4:	4922      	ldr	r1, [pc, #136]	; (8000e40 <Slave_States+0xdc>)
 8000db6:	4613      	mov	r3, r2
 8000db8:	00db      	lsls	r3, r3, #3
 8000dba:	4413      	add	r3, r2
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	440b      	add	r3, r1
 8000dc0:	3320      	adds	r3, #32
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	4798      	blx	r3
		}

		break ;
 8000dc8:	e02f      	b.n	8000e2a <Slave_States+0xc6>
	}

	case I2C_EV_ADDR_Matched:
	{
		//Notify APP that the Stop Condition is sent by the master
		Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_ADDR_Matched) ;
 8000dca:	7bfa      	ldrb	r2, [r7, #15]
 8000dcc:	491c      	ldr	r1, [pc, #112]	; (8000e40 <Slave_States+0xdc>)
 8000dce:	4613      	mov	r3, r2
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	4413      	add	r3, r2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	440b      	add	r3, r1
 8000dd8:	3320      	adds	r3, #32
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2002      	movs	r0, #2
 8000dde:	4798      	blx	r3

		break ;
 8000de0:	e028      	b.n	8000e34 <Slave_States+0xd0>
	}

	case I2C_EV_DATA_REQ:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	f003 0304 	and.w	r3, r3, #4
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d01f      	beq.n	8000e2e <Slave_States+0xca>
		{
			//the APP layer should send the data (MCAL_I2C_SlaveSendData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_REQ) ;
 8000dee:	7bfa      	ldrb	r2, [r7, #15]
 8000df0:	4913      	ldr	r1, [pc, #76]	; (8000e40 <Slave_States+0xdc>)
 8000df2:	4613      	mov	r3, r2
 8000df4:	00db      	lsls	r3, r3, #3
 8000df6:	4413      	add	r3, r2
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	440b      	add	r3, r1
 8000dfc:	3320      	adds	r3, #32
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2003      	movs	r0, #3
 8000e02:	4798      	blx	r3
		}

		break ;
 8000e04:	e013      	b.n	8000e2e <Slave_States+0xca>
	}
	case I2C_EV_DATA_RCV:
	{
		//make sure that the slave is really in receiver mode
		if(!(I2Cx->SR2 & ( I2C_SR2_TRA)))
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	699b      	ldr	r3, [r3, #24]
 8000e0a:	f003 0304 	and.w	r3, r3, #4
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d10f      	bne.n	8000e32 <Slave_States+0xce>
		{
			//the APP layer should read the data (MCAL_I2C_SlaveReceiveData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_RCV) ;
 8000e12:	7bfa      	ldrb	r2, [r7, #15]
 8000e14:	490a      	ldr	r1, [pc, #40]	; (8000e40 <Slave_States+0xdc>)
 8000e16:	4613      	mov	r3, r2
 8000e18:	00db      	lsls	r3, r3, #3
 8000e1a:	4413      	add	r3, r2
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	440b      	add	r3, r1
 8000e20:	3320      	adds	r3, #32
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2004      	movs	r0, #4
 8000e26:	4798      	blx	r3
		}

		break ;
 8000e28:	e003      	b.n	8000e32 <Slave_States+0xce>
		break ;
 8000e2a:	bf00      	nop
 8000e2c:	e002      	b.n	8000e34 <Slave_States+0xd0>
		break ;
 8000e2e:	bf00      	nop
 8000e30:	e000      	b.n	8000e34 <Slave_States+0xd0>
		break ;
 8000e32:	bf00      	nop
	}
	}

}
 8000e34:	bf00      	nop
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40005400 	.word	0x40005400
 8000e40:	20000074 	.word	0x20000074

08000e44 <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler (void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0

}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr

08000e50 <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler (void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0

}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr

08000e5c <SPI1_IRQHandler>:
 * 							Generic Functions
 * =======================================================================================
 */
//ISR
void SPI1_IRQHandler (void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src ;
	irq_src.TXE = ( ( SPI1->SPI_SR &  (1<<1)) >> 1 );
 8000e62:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <SPI1_IRQHandler+0x54>)
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	085b      	lsrs	r3, r3, #1
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	793b      	ldrb	r3, [r7, #4]
 8000e70:	f362 0300 	bfi	r3, r2, #0, #1
 8000e74:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( ( SPI1->SPI_SR &  (1<<0)) >> 0 );
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <SPI1_IRQHandler+0x54>)
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	793b      	ldrb	r3, [r7, #4]
 8000e82:	f362 0341 	bfi	r3, r2, #1, #1
 8000e86:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ( SPI1->SPI_SR &  (1<<4)) >> 4 );
 8000e88:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <SPI1_IRQHandler+0x54>)
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	091b      	lsrs	r3, r3, #4
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	793b      	ldrb	r3, [r7, #4]
 8000e96:	f362 0382 	bfi	r3, r2, #2, #1
 8000e9a:	713b      	strb	r3, [r7, #4]


	Global_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack (irq_src) ;
 8000e9c:	4b05      	ldr	r3, [pc, #20]	; (8000eb4 <SPI1_IRQHandler+0x58>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	695b      	ldr	r3, [r3, #20]
 8000ea2:	7938      	ldrb	r0, [r7, #4]
 8000ea4:	4798      	blx	r3

}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40013000 	.word	0x40013000
 8000eb4:	200000bc 	.word	0x200000bc

08000eb8 <SPI2_IRQHandler>:
void SPI2_IRQHandler (void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src ;
	irq_src.TXE = ( ( SPI2->SPI_SR &  (1<<1)) >> 1 );
 8000ebe:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <SPI2_IRQHandler+0x54>)
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	085b      	lsrs	r3, r3, #1
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	793b      	ldrb	r3, [r7, #4]
 8000ecc:	f362 0300 	bfi	r3, r2, #0, #1
 8000ed0:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( ( SPI2->SPI_SR &  (1<<0)) >> 0 );
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <SPI2_IRQHandler+0x54>)
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	793b      	ldrb	r3, [r7, #4]
 8000ede:	f362 0341 	bfi	r3, r2, #1, #1
 8000ee2:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ( SPI2->SPI_SR &  (1<<4)) >> 4 );
 8000ee4:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <SPI2_IRQHandler+0x54>)
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	091b      	lsrs	r3, r3, #4
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	793b      	ldrb	r3, [r7, #4]
 8000ef2:	f362 0382 	bfi	r3, r2, #2, #1
 8000ef6:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack (irq_src) ;
 8000ef8:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <SPI2_IRQHandler+0x58>)
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	7938      	ldrb	r0, [r7, #4]
 8000f00:	4798      	blx	r3
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40003800 	.word	0x40003800
 8000f10:	200000bc 	.word	0x200000bc

08000f14 <USART1_IRQHandler>:



//ISR
void USART1_IRQHandler (void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0

	Global_UART_Config->P_IRQ_CallBack () ;
 8000f18:	4b02      	ldr	r3, [pc, #8]	; (8000f24 <USART1_IRQHandler+0x10>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	691b      	ldr	r3, [r3, #16]
 8000f1e:	4798      	blx	r3

}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	200000c4 	.word	0x200000c4

08000f28 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack () ;
 8000f2c:	4b02      	ldr	r3, [pc, #8]	; (8000f38 <USART2_IRQHandler+0x10>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	691b      	ldr	r3, [r3, #16]
 8000f32:	4798      	blx	r3

}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	200000c4 	.word	0x200000c4

08000f3c <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack () ;
 8000f40:	4b02      	ldr	r3, [pc, #8]	; (8000f4c <USART3_IRQHandler+0x10>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	691b      	ldr	r3, [r3, #16]
 8000f46:	4798      	blx	r3


}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	200000c4 	.word	0x200000c4

08000f50 <__libc_init_array>:
 8000f50:	b570      	push	{r4, r5, r6, lr}
 8000f52:	2600      	movs	r6, #0
 8000f54:	4d0c      	ldr	r5, [pc, #48]	; (8000f88 <__libc_init_array+0x38>)
 8000f56:	4c0d      	ldr	r4, [pc, #52]	; (8000f8c <__libc_init_array+0x3c>)
 8000f58:	1b64      	subs	r4, r4, r5
 8000f5a:	10a4      	asrs	r4, r4, #2
 8000f5c:	42a6      	cmp	r6, r4
 8000f5e:	d109      	bne.n	8000f74 <__libc_init_array+0x24>
 8000f60:	f000 f81a 	bl	8000f98 <_init>
 8000f64:	2600      	movs	r6, #0
 8000f66:	4d0a      	ldr	r5, [pc, #40]	; (8000f90 <__libc_init_array+0x40>)
 8000f68:	4c0a      	ldr	r4, [pc, #40]	; (8000f94 <__libc_init_array+0x44>)
 8000f6a:	1b64      	subs	r4, r4, r5
 8000f6c:	10a4      	asrs	r4, r4, #2
 8000f6e:	42a6      	cmp	r6, r4
 8000f70:	d105      	bne.n	8000f7e <__libc_init_array+0x2e>
 8000f72:	bd70      	pop	{r4, r5, r6, pc}
 8000f74:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f78:	4798      	blx	r3
 8000f7a:	3601      	adds	r6, #1
 8000f7c:	e7ee      	b.n	8000f5c <__libc_init_array+0xc>
 8000f7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f82:	4798      	blx	r3
 8000f84:	3601      	adds	r6, #1
 8000f86:	e7f2      	b.n	8000f6e <__libc_init_array+0x1e>
 8000f88:	08000fbc 	.word	0x08000fbc
 8000f8c:	08000fbc 	.word	0x08000fbc
 8000f90:	08000fbc 	.word	0x08000fbc
 8000f94:	08000fc0 	.word	0x08000fc0

08000f98 <_init>:
 8000f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f9a:	bf00      	nop
 8000f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f9e:	bc08      	pop	{r3}
 8000fa0:	469e      	mov	lr, r3
 8000fa2:	4770      	bx	lr

08000fa4 <_fini>:
 8000fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fa6:	bf00      	nop
 8000fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000faa:	bc08      	pop	{r3}
 8000fac:	469e      	mov	lr, r3
 8000fae:	4770      	bx	lr
