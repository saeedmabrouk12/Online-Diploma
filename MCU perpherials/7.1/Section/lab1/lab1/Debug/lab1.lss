
lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005cb  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000534  00000000  00000000  00000797  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025b  00000000  00000000  00000ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000f28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002db  00000000  00000000  00000f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00001247  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000128f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  64:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <delay>:

#include <util/delay.h>
#define PORTDD *(volatile uint8_t *)(0x32)
#define DDRDD *(volatile uint8_t *)(0x31)

void delay (void){
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <delay+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <delay+0x8>
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
	volatile int i,j;
	for(i = 0 ; i< 10;i++)
  78:	1a 82       	std	Y+2, r1	; 0x02
  7a:	19 82       	std	Y+1, r1	; 0x01
  7c:	12 c0       	rjmp	.+36     	; 0xa2 <delay+0x36>
		for(j = 0 ;j < 20000;j++);
  7e:	1c 82       	std	Y+4, r1	; 0x04
  80:	1b 82       	std	Y+3, r1	; 0x03
  82:	05 c0       	rjmp	.+10     	; 0x8e <delay+0x22>
  84:	8b 81       	ldd	r24, Y+3	; 0x03
  86:	9c 81       	ldd	r25, Y+4	; 0x04
  88:	01 96       	adiw	r24, 0x01	; 1
  8a:	9c 83       	std	Y+4, r25	; 0x04
  8c:	8b 83       	std	Y+3, r24	; 0x03
  8e:	8b 81       	ldd	r24, Y+3	; 0x03
  90:	9c 81       	ldd	r25, Y+4	; 0x04
  92:	80 32       	cpi	r24, 0x20	; 32
  94:	9e 44       	sbci	r25, 0x4E	; 78
  96:	b4 f3       	brlt	.-20     	; 0x84 <delay+0x18>
#define PORTDD *(volatile uint8_t *)(0x32)
#define DDRDD *(volatile uint8_t *)(0x31)

void delay (void){
	volatile int i,j;
	for(i = 0 ; i< 10;i++)
  98:	89 81       	ldd	r24, Y+1	; 0x01
  9a:	9a 81       	ldd	r25, Y+2	; 0x02
  9c:	01 96       	adiw	r24, 0x01	; 1
  9e:	9a 83       	std	Y+2, r25	; 0x02
  a0:	89 83       	std	Y+1, r24	; 0x01
  a2:	89 81       	ldd	r24, Y+1	; 0x01
  a4:	9a 81       	ldd	r25, Y+2	; 0x02
  a6:	0a 97       	sbiw	r24, 0x0a	; 10
  a8:	54 f3       	brlt	.-44     	; 0x7e <delay+0x12>
		for(j = 0 ;j < 20000;j++);
}
  aa:	0f 90       	pop	r0
  ac:	0f 90       	pop	r0
  ae:	0f 90       	pop	r0
  b0:	0f 90       	pop	r0
  b2:	df 91       	pop	r29
  b4:	cf 91       	pop	r28
  b6:	08 95       	ret

000000b8 <main>:
int main(void)
{
    /* Replace with your application code */
	DDRDD = (1<<4 |1<<5|1<<6|1<<7);
  b8:	80 ef       	ldi	r24, 0xF0	; 240
  ba:	81 bb       	out	0x11, r24	; 17
	
	PORTDD =0b00000000;
  bc:	12 ba       	out	0x12, r1	; 18
    while (1) 
    {
		
		PORTDD = 0b00100000;
  be:	80 e2       	ldi	r24, 0x20	; 32
  c0:	82 bb       	out	0x12, r24	; 18
		delay();
  c2:	0e 94 36 00 	call	0x6c	; 0x6c <delay>
		PORTDD = 0b01000000;
  c6:	80 e4       	ldi	r24, 0x40	; 64
  c8:	82 bb       	out	0x12, r24	; 18
		delay();
  ca:	0e 94 36 00 	call	0x6c	; 0x6c <delay>
		PORTDD = 0b10000000;
  ce:	80 e8       	ldi	r24, 0x80	; 128
  d0:	82 bb       	out	0x12, r24	; 18
		delay();
  d2:	0e 94 36 00 	call	0x6c	; 0x6c <delay>
		PORTDD = 0b00010000;
  d6:	80 e1       	ldi	r24, 0x10	; 16
  d8:	82 bb       	out	0x12, r24	; 18
		delay();
  da:	0e 94 36 00 	call	0x6c	; 0x6c <delay>
  de:	ef cf       	rjmp	.-34     	; 0xbe <main+0x6>

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>
